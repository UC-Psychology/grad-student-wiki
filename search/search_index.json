{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to our Wiki!","text":"<p>You've either stumbled across or directed yourself to the University of Cincinnati Psychology Graduate Student Wiki! Regardless of your journey, we're glad you're here <code>&lt;3</code> <code>&lt;3</code></p> <p>This wiki is a collaborative effort by the graduate students in the Department of Psychology at the University of Cincinnati. It is intended to be a resource for current and future graduate students in the department, but also serve anyone with similar interests and learning goals!</p>"},{"location":"#material-for-mkdocs","title":"Material for MkDocs","text":"<p>MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file.</p> <p>Themes can be added to MkDocs documentation projects, the theme we are using is called \"Material for MkDocs\". To learn about the theme for our documentation, head over to the Material for MkDocs documentation site.</p> <p>For full MkDocs documentation visit mkdocs.org.</p>"},{"location":"#questions","title":"Questions?","text":"<p>For questions about how to use or contribute to this wiki, reach out to Trent Wirth via email or open an issue on our GitHub repository.</p>"},{"location":"MQEtips/","title":"MQE Tips","text":"<p>A: Notes on choosing an MQE topic</p> <p>B: Steps for creating a stellar outline first draft</p> <p>C: Tools for reviewing &amp; writing</p> <p>D: Using Copilot for Time Management</p> <pre><code>Contributors:\nEG 2024-06-11\nTDW 2024-08-15\n</code></pre> <p>DISCLAIMER: This guide was written by a CORA student, and MQE traditions may differ across programs. These statements have not been vetted by faculty, however they are based on what has led to a successful MQE proposal. This guide is not meant to replace or contradict the support and feedback you will obtain from your advisor and committees. For any questions regarding the MQE, its rules, and its possible formats, you can reach out to your program director (Paula Silva or Kristen Jastrowski-Mano).</p>"},{"location":"MQEtips/#section-a-notes-on-choosing-an-mqe-topic","title":"Section A: Notes on choosing an MQE topic","text":"<p>Note 1: A review is not a research proposal</p> <p>Note 2: Talk it out, over and over</p> <p>Note 3: AI can be your friend</p> <p>Note 4: Ask peers to show you their outlines</p>"},{"location":"MQEtips/#note-1-a-review-is-not-a-research-proposal","title":"Note 1: A review is not a research proposal","text":"<p>The truth about a review is that it is a snapshot of a landscape, not an argument. It can be used as a launchpad for making arguments, but the idea is that you won't know what those arguments precisely are in advance. This can be confusing when people say you can use it as your dissertation introduction. There may be certain kinds of reviews that act as comparable dissertation intros, but a more theoretical review can be thought of in substantially different terms.</p> <ul> <li>Types of Literature Review - A Guide for Researchers (wiki)</li> <li>Here is a compare and contrast table to show some differences between a thesis paper and a review paper:</li> </ul> Thesis Paper Review Paper You are writing background to create the rationale for doing certain research. You are capturing a landscape (which can include several points that could be turned into rationales for future research). You are expanding on a particular gap in detail. Your snapshot of a landscape is from an angle which can help you identify several potential gaps that exist. You are focusing in on a particular issue or problem. Your topic is broad enough to contain many issues and problems which you can examine. Your work will speak to a narrow, specific interest. Your work will speak to a field, sub-field, or body of practitioners."},{"location":"MQEtips/#note-2-talk-it-out-over-and-over","title":"Note 2: Talk it out, over and over","text":"<ul> <li>Because choosing an MQE topic can lack many clear guidelines or boundaries, it can be difficult to hone in on one topic. Make sure you are talking about your interests to multiple people over and over. Talking it through can help you refine your thinking and identify the things which you are truely passionate about.<ul> <li>A talking buddy can be a family member or friend, or anyone who will listen (a dog? a cat? a fish?). I've even \"talked\" to ChatGPT before.</li> </ul> </li> </ul>"},{"location":"MQEtips/#note-3-ai-can-be-your-friend","title":"Note 3: AI can be your friend","text":"<ul> <li>You can use Elicit AI to identify research that exists.</li> <li>You can also use ChatGPT as your \"Talk it out\" buddy, and ask if they know of any researchers who have looked at things similarly to the way you would like to.</li> <li>Students also have access to the organizational Copilot through UC, which is like ChatGPT except it can search the live web via Bing.<ul> <li>If you login with your UC email, you can access a protected version which won't save any of your search data (it's reliability is questionnable, so always double check it's sources).</li> </ul> </li> </ul>"},{"location":"MQEtips/#note-4-ask-peers-to-show-you-their-outlines","title":"Note 4: Ask peers to show you their outlines","text":"<ul> <li>The MQE is an independent \"test\" which begins once your outline is approved by your committee. While you are working on your outline, however, check with peers to see what they did for their outlines so you have an idea of the kinds of outlines that have been approved.<ul> <li>Everyone's MQE outline is very different, and every committee will have different reactions, so asking multiple people can be helpful.</li> </ul> </li> </ul>"},{"location":"MQEtips/#section-b-steps-for-creating-a-stellar-outline-first-draft","title":"Section B: Steps for creating a stellar outline first draft","text":"<p>Below are some helpful steps to set you up for a strong initial MQE outline draft. As an interative process, you may circle back through steps as you review literature to refine your topic. In all cases, this is meant to set you up for the most constructive interaction with your advisor who will be there to offer feedback and suggestions for further refinement.</p>"},{"location":"MQEtips/#1-identify-existing-papers-to-emulate","title":"1. Identify Existing Papers to Emulate","text":"<p>After determining the type of paper you will be writing for your MQE (e.g., like an narrative review, or systematic review), visit a journal which publishes those kinds of papers and identify a couple examples of papers you would like to emulate. CORA faculty have recommended modelling after papers in the Annual Reviews of Psychology.</p> <ul> <li>You may also find model papers, or inspiring examples, as you are reviewing the literature to refine your topic idea. A good practice is to save the papers you really like as you find them, and then circle back to them when you are ready to choose one to model.</li> <li>Model papers do not need to be on your topic. They can simply be papers with a structure or approach that you want to emulate.</li> </ul>"},{"location":"MQEtips/#2-reverse-outline-model-papers","title":"2. Reverse Outline Model Papers","text":"<p>Use the reverse outline method on the paper(s) that you have chosen as your model, or ideal format. Below are some quick reference guides for reverse outlining--keep in mind that the following guides are often referring to how to reverse outline your own work, but in this case you will instead apply the method to the model paper(s) you chose. This is how you can get a feel for how the papers were written, and the resulting outline will become a \"paint by numbers\" model for your own outline:</p> <ol> <li>Harvard Kennedy School Communications Program: Using Reverse Outlines (brief)</li> <li>UCLA Undergraduate Writing Center: Reverse Outlining (brief)</li> <li>University of Wisconsin-Madison Writing Center: Reverse Outlines: A Writer\u2019s Technique for Examining Organization (handout)</li> </ol>"},{"location":"MQEtips/#3-fill-in-the-outline-with-your-topic","title":"3. Fill in the Outline with your Topic","text":"<p>Now that you have your \"paint by numbers\" version of your chosen model paper(s), all you need to do is replace details in the background, aims, and methods with the details that are relevant to your own MQE topic. You can leave the results and discussion sections empty, unless you want to outline the general structure or sections to be included there.</p> <ul> <li>Filling in the details will require you to be looking at the literature so that you can include either a reading list, or the citations you will be using when you start working on the MQE.</li> </ul> <p>This outline can be a very strong first draft of your MQE outline which your advisor can provide additional feedback on for refinement.</p>"},{"location":"MQEtips/#section-c-tools-for-reviewing-writing","title":"Section C: Tools for reviewing &amp; writing","text":"<p>Below are tools I (EG) have found very handy for the MQE process, plus a few extras that may come in handy for others.</p> <ol> <li>Reference Management Software: Zotero and Mendeley are both free reference management softwares. I use Zotero and lean on the tags and notes, and annotate articles. Zotero also has some handy plugins, but it is not for everyone. Below is a chart comparing the two:</li> </ol> Feature Zotero Mendeley Storage Options 300MB free, expandable with any WebDAV server 2GB free cloud storage File Management Organizes PDFs, PDF reader for annotations, Plugins available for deeper editing Integrated PDF reader for annotations Citation Styles and Flexibility Supports many styles with easy customization Supports many styles but with limited customization User Interface and Experience Utilitarian with flexible organization options Sleek and user-friendly Literature Review Powerful tagging and searching capabilities, Browser extension for easy import from web, Import files or drag-and-drop from desktop Import PDF files from desktop or web with single-click capture of research papers Notes Simple notes with tagging, Connect related items, Plugins available for deeper editing Integrated PDF reader for annotations Tags Powerful tagging capabilities on both references and notes, Connect related items Supports tagging but not as powerful as Zotero <ol> <li>Scrivener: This is a powerful writing software that allows you to focus on writing one section at a time, or compile for editing altogether. This is handy when you are skipping around sections of a very long paper.<ul> <li>You can also use it for free for 30 non-consecutive days. After that there is a one-time educational fee of $50.99 for a perpetual license.</li> </ul> </li> <li>CADIMA: This is a free web tool for systematic reviews (similar to Covidence). It may be most useful for folks focused on more quantitative findings across papers.<ul> <li>Free!</li> </ul> </li> <li>Obsidian: For those inclined to keep notes in Markdown, I LOVE this tool because I can keep all my notes in one place, across several vaults, and they are encrypted. <ul> <li>I can also tag my notes and keep relevant ones linked together. They also have some really sweet community plugins to fancify your experience.</li> <li>It's free, but if you want, you can pay the exorbitant $57.60/year fee (billed annually with an educational discount) to sync across all your devices.</li> </ul> </li> <li>Qualitative Analysis software: Hottip!! If you have access to a good qualitative analysis software like MAXQDA, you can use it for literature reviews!<ul> <li>Just like analysing a transcript, you can analyse articles with highlighting, tagging, and referring to sections together in a way that makes synthesis of the articles much easier, particularly if you are doing more content analysis in your review.</li> </ul> </li> </ol>"},{"location":"MQEtips/#section-d-using-copilot-for-time-management","title":"Section D: Using Copilot for Time Management","text":"<p>A quick way to manage your time and create a work schedule that works is to ask Copilot (using your protected UC account) to create a schedule for you:</p> I need help with: Ask Copilot: Creating a Timeline/Schedule Let Copilot know anything about your schedule, constraints, or workload (such as needing frequent breaks, or not working on certain days), and it can generate a schedule for you in various formats (word, excel, markdown, etc). Schedules for Neurodiversity You can say things like, \"I have ADHD and have trouble with XYZ, and I need a schedule where I can review these articles in this time period\", and Copilot will generate a schedule for you with built in breaks, etc. Assigning Articles for Review You can upload article lists and ask it to create a schedule with assigned articles. It will also read comments in Word documents can assign those for review. Software Recommendations You can also ask Copilot to recommend good software like Kanban boards, Pomodoro timers, and checklist organizers. You can specify if you want something free, or free for students."},{"location":"contribute/","title":"Contributing to the Wiki","text":"<p>To get started, follow these steps:</p> <ol> <li> <p>Create a GitHub account: Visit the GitHub website github.com and sign up for a new account if you don't have one already. If you are a student at a University, you can sign up for a free student account with additional benefits, like GitHub Co-Pilot - a must have! To learn how to sign up for Co-Pilot, visit the tutorial on setting up co-pilot in the GitHub Docs.</p> </li> <li> <p>Join the UC Psychology organization on GitHub: If the MkDocs project you want to contribute to is part of the UC Psychology organization, request to join the organization by visiting their GitHub page and clicking on the \"Join\" button.</p> </li> <li> <p>Set up GitHub Desktop: Download and install GitHub Desktop from the official GitHub Desktop website. This tool will help you manage your Git repositories and make it easier to contribute to the project.</p> </li> <li> <p>Clone the project repository: Once you have GitHub Desktop installed, open it and click on the \"Clone a repository\" button. Select the MkDocs project repository you want to contribute to and choose a local directory where you want to store the project files.</p> </li> <li> <p>Create your own branch: In GitHub Desktop, click on the \"Current branch\" dropdown menu and select \"New branch\". Give your branch a descriptive name that reflects the changes you plan to make, include your first name as the initial part of every branch you create, like this: <code>trent/add-mkdocs-tutorial-page</code>. In this example, Trent is adding a page to the wiki that will focus on a tutorial for using MkDocs. When you create a new branch, GitHub Desktop will automatically switch to that branch.</p> </li> </ol> <p>Now you are ready to start contributing to the MkDocs project on GitHub using GitHub Desktop. Make sure to follow the project's guidelines and best practices for making changes, creating pull requests, and collaborating with other contributors.</p> <p>Tip</p> <p>Want to add a page to the wiki? Check out the Add a Page to the Wiki tutorial for step-by-step instructions!</p> <p>Happy contributing!</p>"},{"location":"glossary/","title":"Glossary","text":""},{"location":"glossary/#git","title":"git","text":"<p>Git is a distributed version control system that allows multiple people to collaborate on a project. It tracks changes to files and allows users to easily manage different versions of their code. To learn about git, head to the git documentation.</p>"},{"location":"glossary/#git-terminology","title":"git terminology:","text":""},{"location":"glossary/#merge","title":"Merge","text":"<p>Merge is a command that combines two or more branches into one. It is often used to combine changes from one branch into another. To learn about merging, head to the git documentation.</p>"},{"location":"glossary/#branch","title":"Branch","text":"<p>In git, a branch is essentially a separate version of the main repository, allowing you to work on different parts of a project without impacting the main branch. It\u2019s a pointer to a snapshot of your changes. This means that any changes you make in the context of the currently active branch will be kept separate from all other branches.</p>"},{"location":"glossary/#pull-request-pr","title":"Pull Request (PR)","text":"<p>A pull request is a request to merge changes from one branch into another. It is often used to review code before merging it into the main branch. To learn about pull requests, head to the GitHub documentation.</p>"},{"location":"glossary/#push","title":"Push","text":"<p>Push is a command that sends local changes to a remote repository. It is often used to share changes with other people. To learn about pushing, head to the git documentation.</p>"},{"location":"glossary/#github","title":"GitHub","text":"<p>GitHub (owned by Microsoft) is a web-based hosting service for version control using Git. It allows users to collaborate on projects and share their code with others. To learn about GitHub, head to the GitHub documentation.</p>"},{"location":"glossary/#ide","title":"IDE","text":"<p>IDE stands for Integrated Development Environment. It is a software application that provides comprehensive facilities to computer programmers for software development. In other words, IDE's are applications you can use to write and edit code! To learn about IDEs, head to the IDE Wikipedia page.</p> <p>Examples of popular IDE's are VS Code or JetBrains PyCharm.</p>"},{"location":"glossary/#jetbrains","title":"JetBrains","text":"<p>JetBrains is a software development company that makes IDEs for various programming languages such as PyCharm for python, Rider for C#, or DataSpell for data science.</p> <p>To learn about JetBrains, head to the JetBrains website.</p>"},{"location":"glossary/#markdown","title":"Markdown","text":"<p>Markdown is a lightweight markup language that is used to format text. It is often used to create documentation for software projects. To learn about Markdown, head to the Markdown Guide.</p>"},{"location":"glossary/#vs-code","title":"VS Code","text":"<p>VS Code is a free source-code editor made by Microsoft for Windows, Linux and macOS. It is often used to edit Markdown files. To learn about VS Code, head to the VS Code documentation.</p>"},{"location":"gradschoolsurvival/","title":"Grad School Survival Guide","text":""},{"location":"gradschoolsurvival/#mqes-got-you-down","title":"MQEs got you down?","text":"<p>&lt;&lt; Check out MQE Tips that could save time and distress! &gt;&gt;</p>"},{"location":"gradschoolsurvival/#uc-psychology-graduate-student-resource-list","title":"UC Psychology Graduate Student Resource List","text":"<pre><code>Contributors:\nEG 2024-06-11\n</code></pre>"},{"location":"gradschoolsurvival/#all-around-resources","title":"All Around Resources","text":"RESOURCES CONTACT/LINK: Interactive Doctoral Student Guide: Carefully organised and curated by our very own Paula Silva, this interactive doctoral student guide on Canvas is your onestop for all things related to your milestones! Resources are also available. Check it out! Find in Canvas course: PSYC Doctoral Students. Canvas Link Gradresources.org: Get resources for graduate students, including the National Grad Crisis Line. https://gradresources.org/ CONCERNS &amp; COMPLAINTS: For concerns regarding treatment as a graduate student or academic integrity/training that are not/cannot be adequately addressed by the department, see the contacts below: Dean Ryan White: A&amp;S contact as a first-stop for any concerns the department cannot adequately handle or support. white2r2@ucmail.uc.edu Dean Rose Marie Ward: Graduate College contact for any concerns related to your graduate student experience or training. wardrm@ucmail.uc.edu Dean Littisha Bates: A&amp;S contact for any DEI related concerns (you can also contact Dean Ryan White). bateslh@ucmail.uc.edu"},{"location":"gradschoolsurvival/#general-supports","title":"General Supports","text":"GENERAL SUPPORTS CONTACT/LINK: Psychology Graduate Student Association (PGSA): Elected by students every Spring, the PGSA executive board supports students with social events, professional development (including dissemination of Debeck funds), and as a liaison between students and faculty (including a semesterly Student-Faculty Leadership Assembly). As a part of the Graduate Student Government (GSG), PGSA is an independent body of support and advocacy. Students also have access to GSG funding for conferences, research, awards, and activities, as well as higher-level advocacy (including health insurance, parental leave, transporation). PGSA eBoard 2024-25: Isabella P. (President), KellyAnn B. (Vice President), Charlie G. (Treasurer), Jamie H. (Secretary), Lisa G. &amp; Sabrina B. (Social Co-chairs); PGSA Membership: All Psychology Doctoral Students; PGSA Student Folder 2023-24 link PGSA Upcoming Events on CampusLink PGSA Events on CampusLink link UC Women\u2019s Center Resource Document for Student Parents:\u00a0Information about your rights as a student parent, campus supports, lactation room, childcare information, and information about talking to instructors. UC Women's Center Resources Link International Student Advisors:\u00a0UC International Services can help you with questions about arriving to UC, your visa status, work authorization, life at the university, taxes and more. International Student Advisors Link International Student General Questions: When you call or email, you will be directed to the Advisor of the Day. The AOD is available for phone calls and in-person questions between 8am - 12pm and 2 - 5pm EST during business hours. Call +1 513-556-4278 International Services email international.services@uc.edu Bearcats Pantry: They provide free food, hygiene items, cleaning supplies, and professional clothing to students. Bearcats Pantry Link Ombuds: They offer space for supportive, confidential conversations, assistance with student-to-student and student-to-faculty mediation, and more! They are also not mandatory reporters. Ombuds Link"},{"location":"gradschoolsurvival/#academic-supports","title":"Academic Supports","text":"ACADEMIC SUPPORTS CONTACT/LINK: Accessibility: They have supported students to come up with accommodation plans that fit their situation and needs as graduate students! If you are requesting accommodations for the first time, please follow the link on the right. If you are already receiving accommodations and want to update your plan, vent,\u00a0 explore further options for support in graduate school, contact Camilla Gilbert (email below). Accessibility Resources Link A&amp;S Accessibility Coordinator Camilla Gilbert: Contact for individualised supports (anything beyond the accommodations offered at the beginning of semesters). These can include things like accommodations for milestones. camilla.gilbert@uc.edu Accessibility Director Heidi Pettyjohn: Contact for accommodations inquiries that would cross-over into your graduate assistanceship responsibilities (GA employment). heidi.pettyjohn@uc.edu Writing Center: Assistance with writing assignments, writing style, and more! UC Writing Center Link Statistics Consulting Center: They offer services to help with experimental design, interpretation of results, and more! A&amp;S Statistics Consulting Center Link Faculty Development OneStop: Trainings for graduate students &amp; instructors of record (IORs), including canvas workshops, qualitative analysis, python, and more! Faculty Development Search Engine Link CETL Teaching Workshops (Recorded): A repository of previously recorded workshops and webinars for graduate teaching assistants (TAs) and instructors of record (IORs) from the Faculty OneStop (see resource listed above for live upcoming workshops). Find things like using Canvas, Kaltura, teaching online, classroom engagement, et cetera. CETL Recorded Workshops &amp; Webinars Link"},{"location":"gradschoolsurvival/#financial-supports","title":"Financial Supports","text":"FINANCIAL SUPPORTS CONTACT/LINK: PGSA Professional Development funds: Each student can request reimbursement for up to $200. These funds can only be used to help pay for funds related to professional development. These funds must be used before April 25th, 2024. (Exception for SPPAC conference). (Applies to Academic year 2023-24 only) Get reimbursed or Reserve funds Link Graduate Student Government (GSG) Conference Awards: The GSG Conference Travel Award is provided to financially assist graduate students in presenting their research at an academic conference, and/or attending a research conference to develop their professional skills. GSG Conference Awards Link Graduate Student Government (GSG) Research Awards: A graduate student can be awarded a maximum of $1700 (Intradisciplinary Research), $2000 (Advancement of Diversity or Interdisciplinary Research and Innovation and Entrepreneurship Research Fellowship).\u00a0(Updated 2023-24)  (Applies to Academic year 2023-24 only) GSG Research Awards Link Graduate Student Government (GSG) All Awards: Grad Student Awards Link You may be eligible for Medicaid: Sometimes Medicaid can be an option for students as a primary insurance provider (alone), or a secondary insurance provider (in addition to other insurance, such as the student health insurance). Medicaid (OH) Link Kentucky Medicaid Medicaid (KY) Link"},{"location":"gradschoolsurvival/#reporting-tools","title":"Reporting Tools","text":"REPORTING TOOLS Link Psychology Department Anonymous Feedback Form: Graduate directors will review the feedback about once a week. Please do not use this portal for time-urgent issues or for situations associated with mandatory reporting procedures such as Title IX, harassment or discrimination complaints; those should be communicated by phone, email or in person. Psyc Grad Director Anonymous Feedback Link Bias Incident Reporting Tool: This reporting tool is a mechanism for members of our A&amp;S family to report incidents of unfair or poor treatment, discrimination, invalidation or disenfranchisement to the College of Arts and Sciences. This is received by The Equity Council of the College of A&amp;S. Supports restorative justice approaches and can be accessed by individuals or groups of students.\u00a0(Link accessed 06/14/24) Incident Reporting Link Title IX Reporting Tool: for campus and community members to report concerns related to discrimination, harassment, sexual misconduct, and general campus climate concerns. Uses supportive measures - non-disciplinary and non-punitive in nature. Title IX One-click Reporting Tool Link"},{"location":"gradschoolsurvival/#counseling-self-help-crisis-care","title":"Counseling, Self-Help, Crisis Care","text":"COUNSELING, SELF-HELP, CRISIS CARE CONTACT/LINK: UC Advocates: for help regarding sexual assault for yourself or a friend. Call 513-431-3807 Counseling &amp; Psychological Services (CAPS): They help UC students take care of mental health by offering individual and group therapy. During business hours (M-F, 8:30am-5:00pm), schedule a free appointment with a counselor (see the link on the right). Counseling &amp; Psychological Services (CAPS) CAPS Crisis/ after-hours care: Call (513) 556-0648 University Health Services (UHS): Offers medication management and psychotherapy to UC students. Requires a physician referral. None of the psychotherapy team are clinical supervisors or preceptors for graduate students, and they do not have any UC master's or doctoral trainees placed with them. UHS Mental Health Link Lindner Athletic Center, 3rd Floor, Room 335 OhioPHP: For anyone struggling, they can help you navigate systems and resources, or make community resource referrals. They also house self-assessments and offer presentations. The Ohio Professionals Health Program, Inc. (OhioPHP) assists hundreds of healthcare workers across the state with a wide range of concerns including stress, burnout, mental health, or substance use disorders and much more! https://www.ohiophp.org/ UC Self-help Resources: Therapy Assistance Online (TAO) is a\u202ffree\u202finteractive, web-based self-help program that provides online and mobile tools to help you overcome the day to day challenges around stressors like anxiety, depression, or other concerns. Reach Out App (Google Play, App Store) \u2013 UC CAPS app for students or their friends requiring mental health assistance TAO or the Reach Out App Link Grad Resources Crisis Care: Read about the national grad crisis line, get access to 1 month of free counseling through BetterHelp, or connect with a coach to help navigate graduate school. Grad Resources Crisis Care Link The National Grad Crisis Line: The National Grad Crisis Line helps graduate students reach free, confidential telephone counseling, crisis intervention, suicide prevention, and information and referral services provided by specially-trained call-takers. All counselors have completed training to understand the unique issues faced by graduate students. They are available 24/7 to listen, connect and assist you today! 1.877.GRAD.HLP (1-877-472-3457) 988 Suicide and Crisis Lifeline: If you are in crisis or are experiencing difficult or suicidal thoughts. Call or text: 988 Crisis Text Line: Text HOME to 741741 from anywhere in the United States, anytime. Crisis Text Line is here for any crisis. A live, trained Crisis Counselor receives the text and responds, all from our secure online platform. The volunteer Crisis Counselor will help you move from a hot moment to a cool moment. https://www.crisistextline.org/ Crisis Text Line: Text HOME to 741741"},{"location":"gradschoolsurvival/#psychology-graduate-student-association-resources","title":"Psychology Graduate Student Association Resources","text":"PGSA RESOURCES CONTACT/LINK: Check out our growing library of resources available to students! PGSA Resources Folder Link Note: these lists are not exhaustive."},{"location":"howtos/","title":"How To Guides","text":"<p>A how-to guide is a type of instructional document that provides step-by-step instructions on how to perform a specific task or achieve a particular goal. It is designed to guide users through a series of actions in a clear and concise manner, helping them understand and accomplish a specific task or solve a problem.</p> <p>How-to guides are commonly used in various fields, including software development, DIY projects, cooking, and many others. They are typically written in a structured format, with headings, subheadings, and bullet points to organize the information and make it easy to follow.</p> <p>In the context of software development, a how-to guide can provide instructions on how to use a specific library or framework, how to solve a particular coding problem, or how to set up and configure a development environment. These guides often include code snippets, explanations, and examples to help developers understand and implement the instructions effectively.</p> <p>Overall, a how-to guide serves as a valuable resource for individuals who are looking for practical instructions and guidance to accomplish a specific task or learn something new.</p>"},{"location":"howtos/add_documentation_page/","title":"Add a Page to the Wiki","text":"<p>To create a new page on the wiki, follow these steps:</p> <ol> <li>Open the <code>docs</code> folder in the VS Code (or your preferred IDE).</li> <li>Think about where you want your new page to be located in the wiki. For example, if you want to add a page about how to use Git, you might want to add it to the <code>docs/howtos</code> folder.</li> <li>Create a new Markdown file in the appropriate folder.</li> <li>Add content to your new page using Markdown syntax.</li> <li> <p>Add a link to your new page in the <code>mkdocs.yml</code> file, this will be found in the <code>nav</code> section of the file. The navigation section might look like this: <pre><code>nav: \n  - Home: \n    - index.md\n    - Get Started Contributing: contributing.md\n  - How To's: \n    - howtos/index.md\n</code></pre></p> <p>To add your page to the How To's section, you would add a single line of code the the <code>mkdocs.yml</code> file, like this: <pre><code>    - Home:\n        - index.md\n        - Get Started Contributing: contributing.md\n    - How To's:\n        - howtos/index.md\n        - Use Git: howtos/git.md\n</code></pre></p> </li> <li> <p>Save your changes and commit them to the repository.</p> </li> <li>Push your changes to GitHub. </li> <li>When the page is ready to be added to the Wiki, create a pull request (PR) to merge your changes into the main branch! Your PR will be reviewed by a member of the Wiki team and merged into the main branch if it meets the Wiki's standards.</li> </ol>"},{"location":"howtos/copilot/","title":"Setting up GitHub Co-Pilot for Students","text":"<p>To set up GitHub Co-Pilot, follow these steps:</p> <ol> <li>If you haven't done so already, create a GitHub account: Visit the GitHub website github.com.</li> <li>Follow the instructions on this GitHub page for applying to GitHub Global Campus as a student. This will give you access to GitHub Co-Pilot and other benefits.</li> </ol>"},{"location":"howtos/copilot/#using-github-co-pilot-in-vs-code","title":"Using GitHub Co-Pilot in VS Code","text":"<ol> <li>Install the GitHub Co-Pilot extension: Open VS Code and go to the Extensions tab. Search for \"GitHub Co-Pilot\" and click on the \"Install\" button to install the extension.</li> <li>Sign in to your GitHub account: Click on the \"Sign in to GitHub\" button in the bottom left corner of the VS Code window and follow the instructions to sign in to your GitHub account.</li> <li>Start using GitHub Co-Pilot: Open a new file in VS Code and start typing. GitHub Co-Pilot will automatically suggest code snippets based on the context of your code.</li> <li>Chat with GitHub Co-Pilot: You can also chat with GitHub Co-Pilot by clicking the two speech bubbles icon on the left side of the VS Code window. This will open a chat window where you can ask questions and get answers from GitHub Co-Pilot. This can be useful to have Co-Pilot explain your code line by line, or answer general questions.</li> </ol> <p>Hotkeys</p> <p>You can also use the keyboard shortcut <code>Ctrl+I</code> on Windows or <code>Command+I</code> on Mac to in-line chat with Github Co-Pilot and get immediate suggestions for your code.</p>"},{"location":"howtos/git/","title":"git","text":""},{"location":"howtos/git/#how-to-use-git-in-the-command-line","title":"How to Use Git in the Command Line","text":"<p>To use Git in the command line, follow these steps:</p> <ol> <li>Open your terminal or command prompt.</li> <li>Navigate to the directory where your Git repository is located using the <code>cd</code> command.</li> <li>Initialize a new Git repository by running the command <code>git init</code>.</li> <li>Add files to the staging area using the command <code>git add &lt;file&gt;</code>. You can also use <code>git add .</code> to add all files in the current directory.</li> <li>Commit your changes by running the command <code>git commit -m \"Commit message\"</code>. Replace \"Commit message\" with a descriptive message about your changes.</li> <li>To push your changes to a remote repository, use the command <code>git push &lt;remote&gt; &lt;branch&gt;</code>. Replace <code>&lt;remote&gt;</code> with the name of the remote repository and <code>&lt;branch&gt;</code> with the branch name.</li> <li>To pull changes from a remote repository, use the command <code>git pull &lt;remote&gt; &lt;branch&gt;</code>. Replace <code>&lt;remote&gt;</code> with the name of the remote repository and <code>&lt;branch&gt;</code> with the branch name.</li> </ol> <p>These are the basic commands to use Git in the command line. You can explore more advanced Git commands and features to enhance your workflow.</p>"},{"location":"howtos/git/#how-to-use-git-in-github-desktop","title":"How to Use Git in GitHub Desktop","text":"<p>To use Git in GitHub Desktop, follow these steps:</p> <ol> <li>Open GitHub Desktop.</li> <li>Click on the \"Clone a repository\" button.</li> <li>Select the repository you want to clone and choose a local directory where you want to store the project files.</li> <li>Click on the \"Current branch\" dropdown menu and select \"New branch\".</li> <li>Give your branch a descriptive name that reflects the changes you plan to make, include your first name as the initial part of every branch you create, like this: <code>trent/add-mkdocs-tutorial-page</code>. In this example, Trent is adding a page to the wiki that will focus on a tutorial for using MkDocs. When you create a new branch, GitHub Desktop will automatically switch to that branch.</li> <li>Make your changes to the project files.</li> <li>Commit your changes by clicking on the \"Commit to \" button. Replace <code>&lt;branch&gt;</code> with the name of your branch. <li>Push your changes to a remote repository by clicking on the \"Push origin\" button.</li> <li>To pull changes from a remote repository, click on the \"Fetch origin\" button.</li> <li>To merge changes from a remote repository, click on the \"Merge into \" button. Replace <code>&lt;branch&gt;</code> with the name of your branch. <li>To create a pull request, click on the \"Create pull request\" button. This will open a new tab in your browser where you can review the changes and submit the pull request.</li>"},{"location":"howtos/git_create_a_branch/","title":"Create a Branch","text":""},{"location":"howtos/git_create_a_branch/#branching-tutorial-with-github-desktop-and-vs-code","title":"Branching Tutorial with GitHub Desktop and VS Code","text":"<p>Branching is a vital concept in Git, enabling you to develop new features or fix issues separately from the main codebase. This tutorial will guide you on how to create a new branch in GitHub Desktop, switch between branches, and verify your current branch in VS Code.</p>"},{"location":"howtos/git_create_a_branch/#step-1-option-a-open-your-project-in-vs-code","title":"Step 1 (Option A): Open Your Project in VS Code","text":"<ul> <li>If you prefer starting with VS Code, ensure your project repository is already cloned to your local machine.</li> <li>Launch Visual Studio Code.</li> <li>Navigate to File &gt; Open Folder... and select your project folder to open it.</li> </ul>"},{"location":"howtos/git_create_a_branch/#step-1-option-b-open-your-project-from-github-desktop","title":"Step 1 (Option B): Open Your Project from GitHub Desktop","text":"<ul> <li>If you'd like to start with GitHub Desktop, first ensure you've cloned the repository to your local machine. If not, you can clone it directly from GitHub Desktop.</li> <li>Open GitHub Desktop and select your repository from the list on the left side.</li> <li>With the repository selected, look for the option to Open in Visual Studio Code at the top of GitHub Desktop. This might be found under the Repository menu or as an icon/button depending on your version of GitHub Desktop.</li> <li>Clicking Open in Visual Studio Code will launch VS Code and automatically open your project folder.</li> </ul>"},{"location":"howtos/git_create_a_branch/#step-2-create-a-new-branch-in-github-desktop","title":"Step 2: Create a New Branch in GitHub Desktop","text":"<ul> <li>Open GitHub Desktop.</li> <li>Choose your repository from the list on the left side.</li> <li>At the top of the GitHub Desktop window, near the middle, you will see the name of the current branch. It is typically <code>main</code> or <code>master</code> by default.</li> <li>Click on the current branch name to reveal a dropdown menu. At the top of this menu, you'll find a text box where you can type the name of your new branch. Use concise, descriptive names for branches. For example, for adding a login feature, you could name it <code>feature-add-login</code>.</li> <li>After typing the name of your new branch, click <code>Create Branch</code> or press <code>Enter</code>. GitHub Desktop will create the branch and automatically switch you to it.</li> </ul> <p>Branch Naming Convention: I find that it's really nice to keep branches sorted by who has created them. Even if you're on a solo project, it might be a good idea to keep this convention to form the habit. The way you do this would be to put your name at the beginning of every branch you create. As an example: <code>trent/my-new-branch</code> - where \"my-new-branch\" </p>"},{"location":"howtos/git_create_a_branch/#step-3-verify-your-branch-in-vs-code","title":"Step 3: Verify Your Branch in VS Code","text":"<ul> <li>Return to Visual Studio Code with your project open.</li> <li>Look at the bottom left corner of the window. The name displayed there indicates your currently active branch.</li> <li>If it hasn\u2019t updated to show your newly created branch, click on the branch name. This action triggers VS Code to refresh its connection with your repository, and it should now display your new branch name.</li> <li>If you need to switch to a different branch in VS Code, clicking the branch name at the bottom left will bring up a list of available branches. You can select another branch from this list to switch to it.</li> </ul>"},{"location":"howtos/git_create_a_branch/#step-4-work-on-your-branch","title":"Step 4: Work on Your Branch","text":"<ul> <li>With the new branch checked out, you can now proceed to make changes in VS Code. Your work on this branch will be isolated from the main branch, allowing you to experiment and develop without affecting the main codebase.</li> </ul>"},{"location":"howtos/git_create_a_branch/#step-5-commit-and-push-your-changes","title":"Step 5: Commit and Push Your Changes","text":"<ul> <li>Once you're ready to save your changes, commit them. In VS Code, you can do this by opening the Source Control panel (<code>Ctrl+Shift+G</code> or <code>Cmd+Shift+G</code> on Mac), typing a commit message, and pressing the checkmark button to commit.</li> <li>In GitHub Desktop, enter a summary and optional description for your changes in the bottom left corner, then click <code>Commit to [your-branch-name]</code>.</li> <li>Finally, push your changes to GitHub by clicking the <code>Push origin</code> button in GitHub Desktop. This action will upload your branch and its changes to the remote repository.</li> </ul>"},{"location":"howtos/git_create_a_branch/#conclusion","title":"Conclusion","text":"<p>Well done! You've learned how to manage branches using GitHub Desktop and verify them in Visual Studio Code. Branching is a powerful tool that supports parallel development streams, keeping your main codebase stable while you work on enhancements or fixes. With practice, branching will become an integral part of your development process.</p>"},{"location":"howtos/start_a_coding_project/","title":"So, you're starting a new adventure???","text":"<p>Before you do anything else, make sure you're ready to use GitHub. The first step for that is making a GitHub account. If you haven't done that yet, go to github.com and follow the instructions to create an account.</p> <ol> <li>Create GitHub Account</li> <li>Have Trent (or another admin) add you to the UC-Psychology organization.</li> <li>Create a new repository on GitHub, within the UC-Psychology organization. <ul> <li>Give it a good name, using all lowercase letters and separating words with hyphens.</li> <li>Give it a quick description.</li> <li>Initialize it with a readme.</li> <li>Pick a relevant gitignore file (probably Python, or something recognizable)</li> </ul> </li> <li>Clone the repository to your local machine (I think using the GitHub URL is the easiest way to do this)</li> <li>Open the repository in VS Code (or your favorite editor)</li> </ol>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/","title":"Creating Tactile Feedback in VR","text":"<p>When you're creating an embodied task in VR, sometimes it is useful to be able to have a participant experience feedback from their actions. At times, unity has built in haptic responses to contact between colliders, but other times you may want to trigger this response for yourself. </p> <p>Perhaps a participant makes an error and you want to initiate a pulse of vibration in response. Here is some steps to how you may go about this!</p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#creating-the-script","title":"Creating the script:","text":"<p>This demo assumes you already have the controllers integrated into the environment. If you have trouble with this, please look to the other tutorial for adding hands.</p> <p>----Add details towards adding the script to the objects----</p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#initialising-the-script","title":"Initialising the script:","text":"<p>Basic packages will need to be input for this script. Most of these should appear regularly on creating a script in unity. </p> <pre><code>using System.Collections;\nusing.System.Collections.Generic;\nusing UnityEngine;\nusing Valve.VR;\n</code></pre> <p>the line <code>using Valve.VR</code> is not one of the automatic packages that are set up, rather it is a package that lets you access code functions that are specific to valve hardware, including the Vive headsets, controllers, and the Valve Index Controllers. This code will be built for Valve Index Controllers but should be cross functional with other Valve products. </p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#setting-up-the-environment","title":"Setting up the environment","text":"<p>After initialising the packages you will be using, you will want to title your script and bring in any relevant objects, variables, or features that may be relevant to the code you are executing.</p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#titling","title":"Titling","text":"<p>The title of your script will need to match the title of the document. </p> <pre><code>public class ControllerVibration : MonoBehavior \n{\n</code></pre> <p>In this case, as I have labelled this Behavior script as \"ControllerVibration\", the document should also be named \"ControllerVibration.cs\"</p> <p>NOTE: While I am separating the code, there will be open sections using the {} parenthicals. These will need to be closed further in. </p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#relevant-features","title":"Relevant features","text":"<p>here you will need to grant the code access to any features that you may be trying to access or build. I tend to create these as public objects so that they are accessible to other scripts and/or visible in the Unity Editor. If there is a variable you will not need to edit frequently or access in another location, you may instead want to create these as private.</p> <pre><code>public SteamVR_Action_Vibration hapticAction;\npublic float freq;\npublic float amp;\n</code></pre> <p>Here, you are gaining access to steamVRs inbuilt haptics package as well as setting values that you may use to control the intensity of vibrations. </p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#triggering-a-vibration","title":"Triggering a Vibration","text":""},{"location":"howtos/Unity/Creating_Tactile_Feedback/#continuous-vibration","title":"Continuous Vibration","text":"<p>Use of <code>void Update()</code> allows you to create behaviors that are triggered on each frame the enviornment is live. In Unity, this will typically trigger about 60 times per second depending on the complexity of the scene. (if you are intent on standardising this,look into <code>void FixedUpdate()</code> ).</p> <p>If we just want the controller to vibrate continuously, we can add our call to vibrate here. For this, we can use the <code>Pulse()</code> function. </p> <pre><code>void Update()\n{\n    Pulse(1, freq, amp, SteamVR_Input_Sources.LeftHand);\n}\n</code></pre> <p>This code will take the your values for the fequency (<code>freq</code>) and amplitude (<code>amp</code>), and tell the controller to vibrate for 1 frame at those specifications. As this is called in an <code>Update()</code>, this will then repeat every frame. This provides the <code>Pulse()</code> fucntion the information it needs to operate, but we have not yet set up what this function does. We will come back to this later.</p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#vibration-on-an-event","title":"Vibration on an Event","text":"<p>If we instead want our controller to vibrate under specific circumstances, we can specify when exactly this <code>Pulse()</code> function is called. Consider a situation where I want to vibrate the controller every time the hand touches an object tagged as an errorObject. (NOTE: Tags can be applied to objects in the unity editor.)</p> <p>Instead of using the <code>Update()</code> function, I will use a <code>OnCollisionEnter()</code> function to look for instances of this contact, and then use that to trigger the <code>Pulse()</code>. For this I will need to make use of an <code>if</code> statement </p> <pre><code>void OnCollisionEnter(Collision coll)\n{\n    if (coll.gameObject.tag == \"errorObject\")\n    {\n        Pulse(1, freq, amp, SteamVR_Input_Sources.LeftHand);\n    }\n}\n</code></pre> <p>As you can see, we are still calling the same function, but instead of using every frame to call the <code>Pulse</code> function, we are calling it in any instance that the object this script is attached to (the hands) make contact with a <code>gameObject</code> with the <code>tag</code>: <code>errorObject</code>. </p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#setting-up-the-pulse","title":"Setting up the Pulse()","text":"<p>Finally, we need to tell the <code>Pulse()</code> function what to do when it is called for. For this, we can set up a <code>private</code> fucntion, as we should not really try to access this externally to the code. This function should take all of the relevant inputs that we have specified above in our pulse function (how long, what frequency, what strength, what object) and how to execute it. Thankfully, the <code>SteamVR_Action_Vibration</code> set that we brought in earlier has tools we can levarage.</p> <pre><code>private void Pulse(float duration, float frequency, float amplitude, SteamVR_Input_Sources source)\n{\n    hapticAction.Execute(0, duration, frequency, amplitide, source)\n}\n</code></pre> <p>Here, we are now telling unity that, when the <code>Pulse()</code> function is called, to <code>Execute</code> a vibration at the <code>duration</code>, <code>frequency</code>, and <code>amplitude</code> specified in the call, and to execute this on the <code>source</code> or object specified. </p>"},{"location":"howtos/Unity/Creating_Tactile_Feedback/#finalising","title":"Finalising","text":"<p>Whichever way that you have called the function, be sure to close out your code from the titling section by including a final closing parenthetical, to ensure the whole behavior is contained. </p> <pre><code>}\n</code></pre> <p>This is a basic way to create a haptic response, and you have freedom to controll the structure and duration of vibrations. </p> <p>Contributed by Dalton Cooper</p>"},{"location":"reviews/","title":"Reviews","text":"<p>Getting the insights of your peers into the quality of various software and learning platforms out there is critical in determining which solutions are best for you. </p> <p>A good review should include the following:</p> <ul> <li>A brief description of the software or platform</li> <li>A list of pros and cons</li> <li>A recommendation for or against using the software or platform</li> <li>A link to the software or platform</li> </ul>"},{"location":"reviews/codecademy/","title":"Codecademy","text":"<p>Codecademy is a great resource for learning to code. It's interactive and fun. It's also free, but you can pay for a pro account to get access to more content.</p>"},{"location":"topics/","title":"Research Topics","text":""},{"location":"topics/#written-by-trent-wirth-2024-01-11","title":"Written by Trent Wirth, 2024-01-11","text":"<p>Speaking into the camera here, it was brought to my attention last semester that it would be interesting to have a document on our wiki site that reflected the research topics that I (Trent), as the faculty responsible for running the research practicum, am naturally interested in. </p> <p>For now, that information will live here. As we build the documentation site this semester, I expect this file to become buried (reasonably so) so that we might focus the content on information that is useful to you all.</p>"},{"location":"topics/#research-topics-that-trent-is-into","title":"Research Topics that Trent is into","text":""},{"location":"topics/#general-interests","title":"General Interests","text":"<ul> <li>Self-organization</li> <li>Emergence</li> <li>Complex Systems</li> <li>Behavioral Dynamics</li> <li>Agent-based Modeling</li> <li>Vision Science</li> <li>Spatial Navigation</li> <li>Spatial Cognition</li> <li>UX Research</li> <li>Affordances of LLMs</li> <li>Affordances of Mixed Reality Spaces (AR/VR)</li> <li>Game Development</li> <li>Storytelling</li> </ul>"},{"location":"topics/#specific-research-questions","title":"Specific Research Questions","text":"<p>Maybe too specific</p> <p>In no particular order:</p> <ol> <li>Can we manipulate the momentum vector and measure predictable variation in the locomotor system?<ul> <li>There is a small debate within ecological optics at the moment about the importance of the information that is picked up by the eyes as we walk. <ul> <li>Warren &amp; Hannon 1990 called eye movements a \"problem\" for the visual system in the service of locomotion because of the instability of the retinal image. </li> <li>Work by Jon Matthis and colleagues demonstrates that the movement of the eye through space generates a signal that could be used by the locomotor system to predict the future state of the body. They refer to this as the <code>momentum vector</code>.</li> </ul> </li> <li>Can we design an experiment that tests whether perturbing the momentum vector would have an influence on locomotor control, contrary to the prediction made by Warren &amp; Hannon 1990, but in line with the prediction made by the \"rich retinotopy view\" (as I'm now calling it)?</li> </ul> </li> </ol> <p>the bigger question in #1 is the interest to investigate the relationship between retinal stimulation and full-body motor control (locomotor, or otherwise).</p> <ol> <li> <p>How does personal identity map to the spaces in which we inhabit?</p> <ul> <li>Generally speaking, I want to work towards developing a theory of Ecological Personal Identity.<ul> <li>I've been thinking about this idea since I was an undergraduate; I think I wrote a paper titled something cute like \"Me, Myself, and the Living Room Furniture\" /grimacing/.</li> </ul> </li> <li>This idea is both aspirational, in that I think developing a language around an ecological theory of personal identity would be incredibly helpful to our society, but I also see it as a research topic that needs further investigating.</li> <li>Last semester, I started a project with Jacquana Smith that touches on this topic; mapping geolocation to self-reported wellbeing. </li> <li>A real-world, well-recognized example of this concept is the code-switching that people of color often experience when moving between spaces that are predominantly white and spaces that are predominantly BIPOC.</li> <li>The first big steps in this are a combination of literature review and experimentation. The \"Wellness in the Wild\" project with Jacquana is underway, but I'm also interested in developing an arm of this research that looks at how metrics often used to measure a person's concept of self changes as a function of the physical and virtual* environments they inhabit. <p><code>*</code> Yes, I want to do a VR or Mixed Reality study on this topic!</p> </li> </ul> </li> <li> <p>What is good UX for a motion capture interface?</p> <ul> <li>As many of you know, I'm a co-founder of FreeMoCap, a non-profit dedicated to making motion capture free for everyone. </li> <li>One of my primary roles withing FreeMoCap has been championing the usability side of things. </li> <li>I'd really love to develop some work that assesses the usability of the FreeMoCap system, and then use that information to improve the system.</li> <li>I'll put the Research Question another way: How can an interface be designed such that the affordances of the UI communicate clearly all of the core functionality of a motion capture system, in a way that is inviting and exciting for people (high school students especially) to use?</li> <li>You can learn about FreeMoCap by going to our website, or checking out our GitHub Page.</li> <li>In terms of a specific experiment, I'm imagining a situation where we develop a task for motion capture novices to perform, and then measure the time to completion and satisfaction using a number of different layouts. </li> <li>This is a large project, that stands to benefit me personally as a co-founder of the system. </li> <li>But, it's also an opportunity for you to get product-oriented applied research experience while at UC.  </li> </ul> </li> <li> <p>How do people learn to use LLM Chatbots?</p> <ul> <li>I'm teaching students how to use LLMs to build chatbots in my capstone course, and I'd like to collect data on this systematically in order to develop an understanding of how these technologies are interacted with.</li> <li>A problem with this tech is that is is <code>A</code> incredibly new and <code>B</code> we have no clue how long chatbots, in the way they exist now, will persist. </li> <li>Regardless, I think it's an important question that I know many corporations are asking (there's a reason the UI and experiences of using these things are constantly changing a little), but I think it's important to do this work in a free and open way, and then communicate it to empower the open source LLM community. </li> <li>This is another UX research, product-oriented project - and in a weird way it could benefit me personally as well.<ol> <li>I teach people how to use these things, if I used research to get better at it, my teaching would improve.</li> <li>There is an LLM project within FreeMoCap that I'm slowly getting closer to. If you want to look at SkellyBot, go for it :) </li> </ol> </li> </ul> </li> </ol>"},{"location":"topics/#tech-tools","title":"Tech Tools","text":"<p>Technologies that I'm interested in using for research, I.e., this is a list of things I'm interested in digging into methodologically. Some I have experience with, others I do not.</p> <ul> <li>General Programming Languages<ul> <li>Python - I'd like to use Python for everything :)</li> <li>Dart (<code>C#</code>-like) - used for Flutter Development</li> <li>C# - used for Unity &amp; Lightship development</li> </ul> </li> <li>Apps<ul> <li>Flutter (full-stack app development framework, by Google)</li> </ul> </li> <li>Web<ul> <li>JavaScript (programming language, primarily used for web development)</li> <li>Django (Python based web development framework)</li> </ul> </li> <li>AR/VR<ul> <li>Unity</li> <li>Unreal</li> <li>A-Frame</li> <li>Lightship</li> </ul> </li> <li>Motion Capture<ul> <li>FreeMoCap</li> </ul> </li> </ul>"}]}